version: '3.8'

services:
  scheduler:
    build:
      context: .
      dockerfile: apps/scheduler/Dockerfile
    container_name: scheduler-service
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '3002:3002'
    environment:
      - KAFKA_BROKERS=kafka:9093
      - PRICE_UPDATE_CRON=*/5 * * * *
      - PRICE_UPDATE_ENABLED=true
      - BATCH_SIZE=10
      - MONGODB_URI=mongodb://mongodb:27017/domain_sentinel
      - API_KEY=api-key
      - API_ENDPOINT=https://hor.info/admin_api/v1/domains

  browser-agnostic-chrome:
    build:
      context: .
      dockerfile: apps/browser-agnostic/Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - '3005:3005'
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/domain_sentinel
      - KAFKA_BROKERS=kafka:9093
      - BROWSER_TYPE=chrome
      - CLIENT_ID=browser-agnostic-chrome
      - CONSUMER_GROUP_ID=browser-agnostic-chrome-consumer

  browser-agnostic-webkit:
    build:
      context: .
      dockerfile: apps/browser-agnostic/Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - '3006:3005'
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/domain_sentinel
      - KAFKA_BROKERS=kafka:9093
      - BROWSER_TYPE=webkit
      - CLIENT_ID=browser-agnostic-webkit
      - CONSUMER_GROUP_ID=browser-agnostic-webkit-consumer

  telegram-notifier:
    build:
      context: .
      dockerfile: apps/telegram-notifier/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '3003:3003'
    environment:
      - KAFKA_BROKERS=kafka:9093
      - TELEGRAM_BOT_TOKEN=telegram-bot-token
      - TELEGRAM_CHAT_ID=chat-id

  mongodb:
    image: mongo:6.0
    container_name: domain-sentinel-mongodb
    ports:
      - '27018:27017'
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: domain-sentinel-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: domain-sentinel-kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 60000
      KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_OFFSET_RESET: 'earliest'
    healthcheck:
      test:
        ['CMD-SHELL', "kafka-topics --bootstrap-server localhost:9092 --list 2>&1 | grep -qv 'CoordinatorNotAvailableException'"]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: domain-sentinel-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=domain-sentinel-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

volumes:
  mongodb-data:
