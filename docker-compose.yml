version: '3.8'

services:
  scheduler:
    build:
      context: .
      dockerfile: apps/scheduler/Dockerfile
    container_name: token-scheduler-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - '3002:3002'
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=tokens
      - KAFKA_BROKERS=kafka:9093
      - PRICE_UPDATE_CRON=*/5 * * * * *
      - PRICE_UPDATE_ENABLED=true
      - BATCH_SIZE=2

  updater:
    build:
      context: .
      dockerfile: apps/updater/Dockerfile
    deploy:
      replicas: 3
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      scheduler:
        condition: service_started
    expose:
      - '3001'
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=tokens
      - KAFKA_BROKERS=kafka:9093

  postgres:
    image: postgres:15-alpine
    container_name: token-price-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tokens
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: token-price-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: token-price-kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 60000
      KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 10000
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "kafka-topics --bootstrap-server localhost:9092 --list 2>&1 | grep -qv 'CoordinatorNotAvailableException'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: token-price-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=token-price-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

volumes:
  postgres-data:
